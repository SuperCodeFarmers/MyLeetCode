/*
36. 有效的数独
请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
 

示例 1：


输入：board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 

提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字或者 '.'

*/

#include<vector>
#include <iostream>

using namespace std;

bool isValid(int row, int col, vector<vector<char> > &board)
{
    // 固定行，遍历列
    int count = 0;
    char temp = board[row][col];
    for (int i = 0; i < 9; ++i)
    {
        if (board[row][i] == '.')
        {
            continue;
        }

        if (board[row][i] == temp)
        {
            count++;
        }
    }

    // 固定列，遍历行
    for (int i = 0; i < 9; ++i)
    {
        if (board[i][col] == '.')
        {
            continue;
        }

        if (board[i][col] == temp)
        {
            count++;
        }
    }

    // 遍历小方块
    int newRow = (row + 1) / 3;
    int newCol = (col + 1) / 3;
    for (int i = newRow * 3; i < newRow * 3 + 3; ++i)
    {
        for (int j = newCol * 3; j < newCol * 3 + 3; ++j)
        {

            if (board[i][j] == '.')
            {
                continue;
            }

            if (board[i][j] == temp)
            {
                count++;
            }
        }
    }

    if (count == 3)
    {
        return true;
    }

    return false;
}

bool isValidSudoku(vector<vector<char> > &board)
{
    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; ++j)
        {
            if (board[i][j] == '.')
            {
                continue;
            }

            if (!isValid(i, j, board))
            {
                std::cout << "i:" << i << ", j:" << j << std::endl;
                return false;
            }
        }
    }
    return true;
}


int mian(void)
{
    vector<vector<char> > board = {
            {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
            {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
            {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
            {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
            {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
            {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
            {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
            {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };

        [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]]
    isValidSudoku(board);
    return 0;
}